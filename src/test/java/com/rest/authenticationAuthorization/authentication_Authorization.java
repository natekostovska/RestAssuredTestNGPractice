package com.rest.authenticationAuthorization;

import java.util.Base64;

public class authentication_Authorization {
     /* Authentication proves who you are. Proves your identity. You may or may not have right to perform certain tasks or access
   certain resources.
   *  Authorization proves your right to access. What you can do
   * */

/*
  There are different types of authentication schemes that are used with thr Http protocol.
    - Basic
    - Bearer
    - Digest
    - OAuth

    */

    /*
    *  Base64 encoded username:password in the header
    * Base64 encoding is not secure because are sent as clear text
    * The string is sent in the header along with the request
    * authorization header
    * */

    /*
    *  Digest authentication scheme
    * Challenge - response paradigm
    * Username and password is hashed using MD5 algorithm
    * The clients sends the request to the server without the username and the password
    * Parameters like Realm, Nonce etc. The client uses these parameters and then it encrypts the username and password using the hashing
    * algorithm. Then it sends the encrypted username and pass back to the server response
    * The server then decrypts the username and the password using the same algorithm
    * */

    public static void main(String[] args) {
        String usernameColonPassword ="myUsername:myPassword";
        String base64Encoded= Base64.getEncoder().encodeToString(usernameColonPassword.getBytes());
        System.out.println("Encoded = " + base64Encoded); // String we saw in postman
        byte[] decodeBytes= Base64.getDecoder().decode(base64Encoded);
        System.out.println("Decoded = " + new String(decodeBytes));
    }

    /*
    *  Bearer token
    * Bearer is a person or an entity who holds a security token to get access to a certain resource
    * Cryptic: Generated by the server in response to login
    * Originally created as part of OAuth2.0 spec
    * Header called Authorization Bearer <token>
    * */

    /*
    *  API key
    * Usually generated during first time login or during sign up
    * Used as a replacement for username and password
    * Usually fetched from account settings and often it is possible to delete, regenerate and create multiple API keys
    * Passed as a header or a query parameter or even in the request body
    * Not secure
    * x-api-key 12345
    * https://grey-station-264362.postman.co/settings/me/api-keys
    * */

    /*
    * OAuth
    * It is used for Authorization, not Authentication.
    * For Authentication there is something called as OpenID Connect (a layer built on top of OAuth and it provides identity service)
    * that is used
    * With OAuth we are authorizing a service so that it can use resources from another service and we are authorizing that service
    * on behalf of a person or an entity. We are doing this to solve the delegated authorization problem
    * */

    /*
    * Open ID Connect + OAuth
    * We are creating account on LinkedIn by i am getting authenticated by Google or Facebook
    * */

}
